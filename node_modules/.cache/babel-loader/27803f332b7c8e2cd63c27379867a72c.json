{"ast":null,"code":"var _jsxFileName = \"/home/maximiliano_casale/Documentos/react/TweetSimulator/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Header from './components/Header';\nimport SendTweet from './components/SendTweet';\nimport ListTweets from './components/ListTweets';\nimport { TWEETS_STORAGE } from './utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [toastProps, setToastProps] = useState({\n    open: false,\n    text: null\n  });\n  const [allTweets, setAllTweets] = useState([]);\n  const [reloadTweets, setReloadTweets] = useState(false);\n  useEffect(() => {\n    if (toastProps.open) {\n      setTimeout(() => {\n        setToastProps({\n          open: false,\n          text: null\n        });\n      }, 2000);\n    }\n  }, [toastProps]);\n  useEffect(() => {\n    const allTweetsStorage = localStorage.getItem(TWEETS_STORAGE);\n    const allTweetsArray = JSON.parse(allTweetsStorage);\n    setAllTweets(allTweetsArray);\n    setReloadTweets(false);\n  }, [reloadTweets]);\n\n  const deleteTweet = index => {\n    allTweets.splice(index, 1);\n    setAllTweets.apply(allTweets);\n    localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweets));\n    setReloadTweets(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"tweets-simulator\",\n    maxWidth: false,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendTweet, {\n      setToastProps: setToastProps,\n      allTweets: allTweets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListTweets, {\n      allTweets: allTweets,\n      deleteTweet: deleteTweet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'right'\n      },\n      open: toastProps.open,\n      autoHideDuration: 2000,\n      message: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"message-id\",\n        children: toastProps.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6LhLIk/pxfZ3RZU+2vtIpsDi1tA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/maximiliano_casale/Documentos/react/TweetSimulator/src/App.js"],"names":["React","useState","useEffect","Container","Snackbar","Header","SendTweet","ListTweets","TWEETS_STORAGE","App","toastProps","setToastProps","open","text","allTweets","setAllTweets","reloadTweets","setReloadTweets","setTimeout","allTweetsStorage","localStorage","getItem","allTweetsArray","JSON","parse","deleteTweet","index","splice","apply","setItem","stringify","vertical","horizontal"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,mBAApC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,cAAT,QAA+B,mBAA/B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC;AAC3CW,IAAAA,IAAI,EAAE,KADqC;AAE3CC,IAAAA,IAAI,EAAE;AAFqC,GAAD,CAA5C;AAKA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,KAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,UAAU,CAACE,IAAf,EAAqB;AACnBM,MAAAA,UAAU,CAAC,MAAM;AACfP,QAAAA,aAAa,CAAC;AACZC,UAAAA,IAAI,EAAE,KADM;AAEZC,UAAAA,IAAI,EAAE;AAFM,SAAD,CAAb;AAID,OALS,EAKP,IALO,CAAV;AAMD;AACF,GATQ,EASN,CAACH,UAAD,CATM,CAAT;AAWAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CAAqBb,cAArB,CAAzB;AACA,UAAMc,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWL,gBAAX,CAAvB;AACAJ,IAAAA,YAAY,CAACO,cAAD,CAAZ;AACAL,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GALQ,EAKN,CAACD,YAAD,CALM,CAAT;;AAOA,QAAMS,WAAW,GAAIC,KAAD,IAAW;AAC7BZ,IAAAA,SAAS,CAACa,MAAV,CAAiBD,KAAjB,EAAwB,CAAxB;AACAX,IAAAA,YAAY,CAACa,KAAb,CAAmBd,SAAnB;AACAM,IAAAA,YAAY,CAACS,OAAb,CAAqBrB,cAArB,EAAqCe,IAAI,CAACO,SAAL,CAAehB,SAAf,CAArC;AACAG,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GALD;;AAOA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,kBAArB;AAAwC,IAAA,QAAQ,EAAE,KAAlD;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,aAAa,EAAEN,aAA1B;AAAyC,MAAA,SAAS,EAAEG;AAApD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,UAAD;AAAY,MAAA,SAAS,EAAEA,SAAvB;AAAkC,MAAA,WAAW,EAAEW;AAA/C;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,QAAD;AACE,MAAA,YAAY,EAAE;AACZM,QAAAA,QAAQ,EAAE,KADE;AAEZC,QAAAA,UAAU,EAAE;AAFA,OADhB;AAKE,MAAA,IAAI,EAAEtB,UAAU,CAACE,IALnB;AAME,MAAA,gBAAgB,EAAE,IANpB;AAOE,MAAA,OAAO,eAAE;AAAM,QAAA,EAAE,EAAC,YAAT;AAAA,kBAAuBF,UAAU,CAACG;AAAlC;AAAA;AAAA;AAAA;AAAA;AAPX;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAlDQJ,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Header from './components/Header';\nimport SendTweet from './components/SendTweet';\nimport ListTweets from './components/ListTweets';\nimport { TWEETS_STORAGE } from './utils/constants';\n\nfunction App() {\n  const [toastProps, setToastProps] = useState({\n    open: false,\n    text: null,\n  });\n\n  const [allTweets, setAllTweets] = useState([]);\n  const [reloadTweets, setReloadTweets] = useState(false);\n\n  useEffect(() => {\n    if (toastProps.open) {\n      setTimeout(() => {\n        setToastProps({\n          open: false,\n          text: null,\n        });\n      }, 2000);\n    }\n  }, [toastProps]);\n\n  useEffect(() => {\n    const allTweetsStorage = localStorage.getItem(TWEETS_STORAGE);\n    const allTweetsArray = JSON.parse(allTweetsStorage);\n    setAllTweets(allTweetsArray);\n    setReloadTweets(false);\n  }, [reloadTweets]);\n\n  const deleteTweet = (index) => {\n    allTweets.splice(index, 1);\n    setAllTweets.apply(allTweets);\n    localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweets));\n    setReloadTweets(true);\n  };\n\n  return (\n    <Container className=\"tweets-simulator\" maxWidth={false}>\n      <Header />\n      <SendTweet setToastProps={setToastProps} allTweets={allTweets} />\n      <ListTweets allTweets={allTweets} deleteTweet={deleteTweet} />\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        open={toastProps.open}\n        autoHideDuration={2000}\n        message={<span id=\"message-id\">{toastProps.text}</span>}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}